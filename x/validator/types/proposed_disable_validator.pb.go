// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/proposed_disable_validator.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposedDisableValidator struct {
	Address   string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Creator   string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Approvals []string `protobuf:"bytes,3,rep,name=approvals,proto3" json:"approvals,omitempty"`
}

func (m *ProposedDisableValidator) Reset()         { *m = ProposedDisableValidator{} }
func (m *ProposedDisableValidator) String() string { return proto.CompactTextString(m) }
func (*ProposedDisableValidator) ProtoMessage()    {}
func (*ProposedDisableValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ffedaeb03ca643, []int{0}
}
func (m *ProposedDisableValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposedDisableValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposedDisableValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposedDisableValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposedDisableValidator.Merge(m, src)
}
func (m *ProposedDisableValidator) XXX_Size() int {
	return m.Size()
}
func (m *ProposedDisableValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposedDisableValidator.DiscardUnknown(m)
}

var xxx_messageInfo_ProposedDisableValidator proto.InternalMessageInfo

func (m *ProposedDisableValidator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ProposedDisableValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ProposedDisableValidator) GetApprovals() []string {
	if m != nil {
		return m.Approvals
	}
	return nil
}

func init() {
	proto.RegisterType((*ProposedDisableValidator)(nil), "zigbeealliance.distributedcomplianceledger.validator.ProposedDisableValidator")
}

func init() {
	proto.RegisterFile("validator/proposed_disable_validator.proto", fileDescriptor_f7ffedaeb03ca643)
}

var fileDescriptor_f7ffedaeb03ca643 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x63, 0x2a, 0x81, 0x92, 0x31, 0x93, 0x07, 0x64, 0x55, 0x4c, 0x15, 0x52, 0xe2, 0x01,
	0xbe, 0x00, 0x31, 0x31, 0xa1, 0x0e, 0x0c, 0x2c, 0x95, 0xed, 0xf7, 0x14, 0x2c, 0xb9, 0xd8, 0x7a,
	0x76, 0x2b, 0xe0, 0x2b, 0xf8, 0x2c, 0xc6, 0x8e, 0x8c, 0x28, 0xf9, 0x11, 0x54, 0xdc, 0x24, 0x8c,
	0xef, 0x1e, 0xfb, 0x4a, 0xe7, 0x56, 0xd7, 0x7b, 0xe5, 0x2c, 0xa8, 0xe4, 0x49, 0x06, 0xf2, 0xc1,
	0x47, 0x84, 0x0d, 0xd8, 0xa8, 0xb4, 0xc3, 0xcd, 0x84, 0xda, 0x40, 0x3e, 0xf9, 0xfa, 0xf6, 0xc3,
	0x76, 0x1a, 0x51, 0x39, 0x67, 0xd5, 0xab, 0xc1, 0x16, 0x6c, 0x4c, 0x64, 0xf5, 0x2e, 0x21, 0x18,
	0xbf, 0x0d, 0x39, 0x75, 0x08, 0x1d, 0x52, 0x3b, 0xfd, 0xbd, 0x72, 0x15, 0x7f, 0x3c, 0x35, 0xdf,
	0xe7, 0xe2, 0xa7, 0x91, 0xd5, 0xbc, 0xba, 0x50, 0x00, 0x84, 0x31, 0x72, 0xb6, 0x64, 0xab, 0x72,
	0x3d, 0x9e, 0x47, 0x62, 0x08, 0x8f, 0x8f, 0xf8, 0x59, 0x26, 0xa7, 0xb3, 0xbe, 0xac, 0x4a, 0x15,
	0x02, 0xf9, 0xbd, 0x72, 0x91, 0x2f, 0x96, 0x8b, 0x55, 0xb9, 0x9e, 0x83, 0x3b, 0xf8, 0xea, 0x05,
	0x3b, 0xf4, 0x82, 0xfd, 0xf4, 0x82, 0x7d, 0x0e, 0xa2, 0x38, 0x0c, 0xa2, 0xf8, 0x1e, 0x44, 0xf1,
	0xfc, 0xd0, 0xd9, 0xf4, 0xb2, 0xd3, 0xad, 0xf1, 0x5b, 0x99, 0x45, 0x9a, 0xd1, 0x44, 0xfe, 0x33,
	0x69, 0x66, 0x95, 0x26, 0xbb, 0xc8, 0x37, 0x39, 0x8f, 0x94, 0xde, 0x03, 0x46, 0x7d, 0xfe, 0x37,
	0xc8, 0xcd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xb8, 0x19, 0xf6, 0x3e, 0x01, 0x00, 0x00,
}

func (m *ProposedDisableValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposedDisableValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposedDisableValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Approvals) > 0 {
		for iNdEx := len(m.Approvals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Approvals[iNdEx])
			copy(dAtA[i:], m.Approvals[iNdEx])
			i = encodeVarintProposedDisableValidator(dAtA, i, uint64(len(m.Approvals[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProposedDisableValidator(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposedDisableValidator(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposedDisableValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposedDisableValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposedDisableValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposedDisableValidator(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProposedDisableValidator(uint64(l))
	}
	if len(m.Approvals) > 0 {
		for _, s := range m.Approvals {
			l = len(s)
			n += 1 + l + sovProposedDisableValidator(uint64(l))
		}
	}
	return n
}

func sovProposedDisableValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposedDisableValidator(x uint64) (n int) {
	return sovProposedDisableValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposedDisableValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposedDisableValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposedDisableValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposedDisableValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposedDisableValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposedDisableValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposedDisableValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposedDisableValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposedDisableValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposedDisableValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposedDisableValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposedDisableValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposedDisableValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvals = append(m.Approvals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposedDisableValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposedDisableValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposedDisableValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposedDisableValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposedDisableValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposedDisableValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposedDisableValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposedDisableValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposedDisableValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposedDisableValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposedDisableValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposedDisableValidator = fmt.Errorf("proto: unexpected end of group")
)
